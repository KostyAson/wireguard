import aiogram
import aiogram.fsm
import aiogram.fsm.context
import utils
import datetime as dt
import states
import requests
import uuid
import os
import dotenv
import log
import asyncio

router = aiogram.Router()

dotenv.load_dotenv('.env')


@router.message(aiogram.F.text=='/pay')
async def invoicing(message : aiogram.types.Message, state : aiogram.fsm.context.FSMContext):
    log.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {utils.get_user_username(message)} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–∞–Ω–¥—É pay")
    if not utils.check_user_sub(message.from_user.id):
        cost = int(open('sub_cost.txt').read())
        await state.set_state(states.PayState.get_email)
        await message.answer(
            f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü: {cost}—Ä\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É, –Ω–∞ –Ω–µ—ë –æ—Ç–ø—Ä–∞–≤–∏–º —á–µ–∫ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã üñä',
            parse_mode='MarkdownV2'
        )
    else:
        await message.answer(f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ:\n{utils.get_user_subdate(message.from_user.id)}')


@router.message(states.PayState.get_email)
async def get_email(message : aiogram.types.Message, state : aiogram.fsm.context.FSMContext, bot : aiogram.Bot):
    description = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü'
    cost = int(open('sub_cost.txt').read())
    req = requests.post(
        'https://api.yookassa.ru/v3/payments',
        headers={
            'Content-Type': 'application/json',
            'Idempotence-Key': str(uuid.uuid4())
        },
        json={
            'amount': {
                'value': f'{cost}.00',
                'currency': 'RUB'
            },
            'capture': True,
            'confirmation': {
                'type': 'redirect',
                'return_url': 'https://t.me/AVPNmanagerBot'
            },
            'description': description,
            'receipt': {
                'customer': {
                    'email': message.text
                },
                'items': [
                    {
                        'description': description,
                        'quantity': 1,
                        'amount': {
                            'value': f'{cost}.00',
                            'currency': 'RUB'
                        },
                        'vat_code': 1
                    }
                ]
            }
        },
        auth=('441601', os.getenv('youkassa'))
    )
    data = req.json()
    id = data['id']
    url = data['confirmation']['confirmation_url']
    await message.answer(
        f'<a href="{url}">–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É</a>\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç',
        parse_mode='html'
    )
    for _ in range(7):
        await asyncio.sleep(45)
        req = requests.get(
            f'https://api.yookassa.ru/v3/payments/{id}',
            auth=('441601', os.getenv('youkassa'))
        )
        data = req.json()
        if data['status'] == 'succeeded':
            utils.set_user_subscription(
                message.from_user.id,
                1,
                (dt.datetime.now() + dt.timedelta(days=30)).isoformat()
            )
            utils.update_server_config()
            await bot.send_message(2096978507, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{utils.get_user_username(message)} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É')
            await message.edit_reply_markup(reply_markup=None)
            await message.answer(
                '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, VPN —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚úÖ'
            )
            log.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {utils.get_user_username(message)} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü")
            user_ref = utils.get_user_ref(message.from_user.id)
            if user_ref is not None:
                name = utils.get_user_username(message)
                sub_ref = utils.grand_ref_sub(user_ref)
                if sub_ref:
                    await bot.send_message(chat_id=user_ref, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ–¥–ª–∏–ª–∏ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –Ω–µ–¥–µ–ª—é')
                else:
                    await bot.send_message(chat_id=user_ref, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –í—ã–¥–∞–ª–∏ –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –Ω–µ–¥–µ–ª—é')
            break
    else:
        await message.answer('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay')
    await state.set_state(None)
